version: 2.1
jobs:
  pytest:
    docker:
      - image: cimg/python:3.10
    environment:
      - ALLOWED_HOSTS: localhost
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            sudo apt update -y
            sudo apt install graphviz-dev -y
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Running tests
          command: |
            . venv/bin/activate
            python3 -m pytest
  linting:
    docker:
      - image: cimg/python:3.10
    environment:
      - ALLOWED_HOSTS: localhost
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            sudo apt update -y
            sudo apt install graphviz-dev -y
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
            ls -l
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Running linting
          command: |
            . venv/bin/activate
            flake8 ./ --output-file=flake_report.txt
      - store_artifacts:
          path: flake_report.txt
  coverage:
    docker:
      - image: cimg/python:3.10
    environment:
      - ALLOWED_HOSTS: localhost
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            sudo apt update -y
            sudo apt install libgraphviz-dev -y
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Coverage tests
          command: |
            . venv/bin/activate
            pytest -v --cov=. --cov-report=html
      - store_artifacts:
          path: htmlcov/
  container:
    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      COMMIT_HASH: <<pipeline.trigger_parameters.github_app.commit_sha>>
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build and Push application Docker image
          command: |
            TAG=$COMMIT_HASH
            docker build -t $DOCKERHUB_USERNAME/orange_county:$TAG -t $DOCKERHUB_USERNAME/orange_county:latest .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push --all-tags $DOCKERHUB_USERNAME/orange_county
      - save_cache:
          key: v1-{{ .Branch }}
          paths:
            - /caches/app.tar

workflows:
  test_build_and_push:
    jobs:
      - pytest
      - coverage
      - linting
      - container:
          context:
            - docker_hub_creds
          requires:
            - pytest
          filters:
            branches:
              only: master
